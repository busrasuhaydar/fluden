<!DOCTYPE html>
<html lang="en">
<head>
    <title>Piano Fluid - FINAL</title>
    <style>
        body {
            margin: 0;
            background-color: #000;
            color: #fff;
            font-family: Helvetica, Arial, sans-serif;
            overflow: hidden;
            height:100vh;
        }

        canvas {
            display: block;
            position: absolute;
            outline:0;
        }

        * {
            -webkit-tap-highlight-color: transparent;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

    </style>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1">
</head>
<body>
    <canvas id="glcanvas" width="100vw" height="100vh" tabindex="1"></canvas>

    <script type="text/javascript" src="js/patch.js" async></script>

    <script type="text/javascript">

        function showError(initiator,...args) {
            // Silent
        }

        function patchInitialized(patch) {
            console.log('âœ… Fluid hazÄ±r!');
        }

        function patchFinishedLoading(patch) {
            console.log('ðŸŽ¨ YÃ¼kleme tamamlandÄ±!');
        }

        // ðŸŽ¹ PÄ°YANO MESAJ SÄ°STEMÄ°
        window.addEventListener('message', (event) => {
            if (event.data.type === 'pianoKeyPress') {
                const colors = event.data.colors || [];
                const key = event.data.key;
                const x = event.data.x || window.innerWidth / 2;
                const y = event.data.y || window.innerHeight / 2;
                
                if (colors.length === 0) return;
                
                const color = colors[0];
                console.log('ðŸŽ¹', key.toUpperCase(), 'â†’', `rgb(${color.r},${color.g},${color.b})`);
                
                // PNG rengini Cables'e gÃ¶nder
                setPianoColor(color);
                
                // Mouse simÃ¼lasyonu
                createPianoSpiral(x, y);
            }
        });

        // PNG rengini Cables SplatColor'a set et
        function setPianoColor(color) {
            if (typeof CABLES === 'undefined' || !CABLES.patch) return;
            
            try {
                const normalizedColor = [
                    color.r / 255,
                    color.g / 255,
                    color.b / 255
                ];
                CABLES.patch.setVariable('SplatColor', normalizedColor);
                console.log('âœ… Renk set:', normalizedColor.map(v => v.toFixed(2)));
            } catch(e) {
                console.warn('Renk set hatasÄ±');
            }
        }

        // Spiral mouse hareketi
        function createPianoSpiral(startX, startY) {
            const canvas = document.getElementById('glcanvas');
            if (!canvas) return;
            
            // Mouse down
            canvas.dispatchEvent(new MouseEvent('mousedown', {
                clientX: startX,
                clientY: startY,
                button: 0,
                buttons: 1,
                bubbles: true
            }));
            
            let angle = 0;
            let radius = 0;
            let step = 0;
            const maxSteps = 30;
            
            const interval = setInterval(() => {
                angle += 0.6;
                radius += 3;
                
                const x = startX + Math.cos(angle) * radius;
                const y = startY + Math.sin(angle) * radius;
                
                // Mouse move
                canvas.dispatchEvent(new MouseEvent('mousemove', {
                    clientX: x,
                    clientY: y,
                    button: 0,
                    buttons: 1,
                    bubbles: true
                }));
                
                step++;
                if (step >= maxSteps) {
                    clearInterval(interval);
                    
                    // Mouse up
                    canvas.dispatchEvent(new MouseEvent('mouseup', {
                        clientX: x,
                        clientY: y,
                        button: 0,
                        buttons: 0,
                        bubbles: true
                    }));
                }
            }, 16);
        }

        document.addEventListener("CABLES.jsLoaded", function (event) {
            CABLES.patch = new CABLES.Patch({
                patch: CABLES.exportedPatch,
                "prefixAssetPath": "",
                "assetPath": "assets/",
                "jsPath": "js/",
                "glCanvasId": "glcanvas",
                "glCanvasResizeToWindow": true,
                "onError": showError,
                "onPatchLoaded": patchInitialized,
                "onFinishedLoading": patchFinishedLoading,
                "canvas": {"alpha":true, "premultipliedAlpha":true }
            });
        });

        document.getElementById('glcanvas').addEventListener('touchmove', (e)=>{ e.preventDefault(); }, false);
    </script>
</body>
</html>
